1
00:00:00,000 --> 00:00:02,120
x86 and ARM

2
00:00:02,120 --> 00:00:03,602
– two processor architectures

3
00:00:03,602 --> 00:00:04,774
that power everything

4
00:00:04,774 --> 00:00:06,653
from high-end gaming PCs

5
00:00:06,653 --> 00:00:07,825
to smartphones.

6
00:00:07,825 --> 00:00:09,497
But how do they really compare?

7
00:00:09,497 --> 00:00:11,824
Why does x86 dominate desktops

8
00:00:11,824 --> 00:00:13,825
while ARM is taking over mobile

9
00:00:13,825 --> 00:00:15,445
and even some laptops?

10
00:00:15,445 --> 00:00:17,879
And what do their Assembly languages look like?

11
00:00:17,879 --> 00:00:19,602
In this video, we'll break down

12
00:00:19,602 --> 00:00:22,430
the key differences, compare their Assembly code

13
00:00:22,430 --> 00:00:24,897
and explore what the future holds for both.

14
00:00:24,897 --> 00:00:26,448
Let's get started!

15
00:00:26,448 --> 00:00:28,586
x86 Assembly refers to

16
00:00:28,586 --> 00:00:30,603
the low-level programming language

17
00:00:30,603 --> 00:00:31,826
used for processors based

18
00:00:31,826 --> 00:00:34,136
on the x86 architecture,

19
00:00:34,136 --> 00:00:37,551
originally developed by Intel in 1978

20
00:00:37,551 --> 00:00:39,655
with the 8086 processor.

21
00:00:39,655 --> 00:00:40,844
It follows the CISC,

22
00:00:40,844 --> 00:00:43,068
or Complex Instruction Set Computing,

23
00:00:43,068 --> 00:00:44,931
design, meaning it has a large

24
00:00:44,931 --> 00:00:47,276
and feature-rich set of instructions.

25
00:00:47,276 --> 00:00:49,863
x86 has been the dominant architecture

26
00:00:49,863 --> 00:00:52,657
for PCs, laptops and servers,

27
00:00:52,657 --> 00:00:55,158
with companies like Intel and AMD

28
00:00:55,158 --> 00:00:57,641
continuously improving its performance.

29
00:00:57,641 --> 00:01:00,466
x86 Assembly code interacts directly

30
00:01:00,466 --> 00:01:03,139
with the CPU's registers and memory,

31
00:01:03,139 --> 00:01:05,674
making it useful for high-performance computing,

32
00:01:05,674 --> 00:01:07,002
operating systems

33
00:01:07,002 --> 00:01:09,071
and low-level programming tasks.

34
00:01:09,071 --> 00:01:09,968
If you're unfamiliar

35
00:01:09,968 --> 00:01:12,434
with Assembly concepts like instructions,

36
00:01:12,434 --> 00:01:15,073
CPU registers and memory operations,

37
00:01:15,073 --> 00:01:16,331
check out our separate video

38
00:01:16,331 --> 00:01:18,400
on Assembly basics.

39
00:01:18,400 --> 00:01:20,262
Now let's take a look at ARM Assembly.

40
00:01:20,262 --> 00:01:21,986
ARM Assembly is the low-level

41
00:01:21,986 --> 00:01:24,000
programming language for processors

42
00:01:24,000 --> 00:01:24,982
based on the ARM,

43
00:01:24,982 --> 00:01:27,413
or Advanced RISC Machine, architecture.

44
00:01:27,413 --> 00:01:30,690
Unlike x86, ARM follows the RISC,

45
00:01:30,690 --> 00:01:32,725
or Reduced Instruction Set Computing,

46
00:01:32,725 --> 00:01:35,242
design, meaning it uses a simpler,

47
00:01:35,242 --> 00:01:36,914
more efficient set of instructions

48
00:01:36,914 --> 00:01:39,535
that require fewer cycles per operation.

49
00:01:39,535 --> 00:01:40,931
This makes ARM processors

50
00:01:40,931 --> 00:01:42,845
highly power-efficient, which is why

51
00:01:42,845 --> 00:01:45,346
they dominate smartphones, tablets,

52
00:01:45,346 --> 00:01:47,484
embedded systems and even some modern

53
00:01:47,484 --> 00:01:50,450
laptops (like Apple's M-series chips).

54
00:01:50,450 --> 00:01:52,053
ARM Assembly has a consistent

55
00:01:52,053 --> 00:01:54,312
instruction format and a larger set

56
00:01:54,312 --> 00:01:56,139
of general-purpose registers,

57
00:01:56,139 --> 00:01:58,949
making it different from x86.

58
00:01:58,949 --> 00:02:01,398
Now let's take a look at their instruction sets.

59
00:02:01,398 --> 00:02:02,707
One of the biggest differences

60
00:02:02,707 --> 00:02:05,122
between x86 and ARM

61
00:02:05,122 --> 00:02:08,192
is their instruction set architecture, or ISA.

62
00:02:08,192 --> 00:02:10,520
As mentioned, x86 follows

63
00:02:10,520 --> 00:02:12,641
the CISC model, which includes many

64
00:02:12,641 --> 00:02:14,761
specialized instructions that can perform

65
00:02:14,761 --> 00:02:17,468
multiple operations in a single command.

66
00:02:17,468 --> 00:02:19,933
For example, in x86,

67
00:02:19,933 --> 00:02:22,071
this line multiplies two registers

68
00:02:22,071 --> 00:02:24,226
in a single instruction, whereas ARM's

69
00:02:24,226 --> 00:02:26,793
RISC model requires simpler instructions,

70
00:02:26,793 --> 00:02:28,155
such as the following,

71
00:02:28,155 --> 00:02:30,000
which performs the same operation

72
00:02:30,000 --> 00:02:32,155
but follows a more uniform structure.

73
00:02:32,155 --> 00:02:35,121
Another key difference is memory access

74
00:02:35,121 --> 00:02:38,208
– x86 can manipulate memory directly,

75
00:02:38,208 --> 00:02:40,087
while ARM requires separate load

76
00:02:40,087 --> 00:02:41,569
and store instructions.

77
00:02:41,569 --> 00:02:43,138
The difference in instruction sets

78
00:02:43,138 --> 00:02:45,190
affects everything, from performance

79
00:02:45,190 --> 00:02:46,965
to power consumption and even

80
00:02:46,965 --> 00:02:49,603
how developers write Assembly code.

81
00:02:49,603 --> 00:02:51,569
Next, let's see how they stack up

82
00:02:51,569 --> 00:02:53,810
in performance and energy efficiency.

83
00:02:53,810 --> 00:02:56,310
When comparing x86 and ARM,

84
00:02:56,310 --> 00:02:58,206
performance and power efficiency

85
00:02:58,206 --> 00:03:00,499
are two of the most notable differences.

86
00:03:00,499 --> 00:03:02,568
x86 processors are designed

87
00:03:02,568 --> 00:03:04,586
for high performance, often found

88
00:03:04,586 --> 00:03:07,379
in desktops, laptops and servers,

89
00:03:07,379 --> 00:03:08,672
where power consumption

90
00:03:08,672 --> 00:03:10,741
isn't always a top priority.

91
00:03:10,741 --> 00:03:12,707
These processors typically feature

92
00:03:12,707 --> 00:03:15,000
higher clock speeds and more complex

93
00:03:15,000 --> 00:03:17,207
instructions, allowing them to handle

94
00:03:17,207 --> 00:03:19,483
demanding tasks quickly, such as running

95
00:03:19,483 --> 00:03:22,087
resource-heavy applications and games.

96
00:03:22,087 --> 00:03:24,104
On the other hand, ARM processors

97
00:03:24,104 --> 00:03:26,311
are built for power efficiency,

98
00:03:26,311 --> 00:03:28,605
making them ideal for mobile devices

99
00:03:28,605 --> 00:03:30,000
and embedded systems,

100
00:03:30,000 --> 00:03:31,879
where battery life is crucial.

101
00:03:31,879 --> 00:03:33,586
ARM's simpler instruction set

102
00:03:33,586 --> 00:03:35,500
and low power consumption allow it

103
00:03:35,500 --> 00:03:38,259
to deliver decent performance while using less

104
00:03:38,259 --> 00:03:39,948
energy, making it the go-to choice

105
00:03:39,948 --> 00:03:42,137
for smartphones, tablets

106
00:03:42,137 --> 00:03:43,982
and other portable devices.

107
00:03:43,982 --> 00:03:47,569
So, while x86 excels in raw performance,

108
00:03:47,569 --> 00:03:49,499
ARM shines when it comes to balancing

109
00:03:49,499 --> 00:03:52,017
performance with energy efficiency.

110
00:03:52,017 --> 00:03:54,327
Now, let's talk about compatibility.

111
00:03:54,327 --> 00:03:56,499
Compatibility is a crucial factor

112
00:03:56,499 --> 00:03:57,585
when choosing between

113
00:03:57,585 --> 00:03:59,723
x86 and ARM.

114
00:03:59,723 --> 00:04:01,930
x86 has long been the standard

115
00:04:01,930 --> 00:04:03,585
for general-purpose computing,

116
00:04:03,585 --> 00:04:05,637
meaning most operating systems,

117
00:04:05,637 --> 00:04:07,569
applications and drivers are designed

118
00:04:07,569 --> 00:04:09,448
to work seamlessly with it.

119
00:04:09,448 --> 00:04:11,551
This makes running legacy software

120
00:04:11,551 --> 00:04:12,309
and a wide range

121
00:04:12,309 --> 00:04:14,464
of modern programs effortless.

122
00:04:14,464 --> 00:04:18,086
ARM, however, follows a different instruction set,

123
00:04:18,086 --> 00:04:20,863
so software built for x86 doesn't run

124
00:04:20,863 --> 00:04:23,432
natively on ARM without modifications,

125
00:04:23,432 --> 00:04:25,656
recompilation or emulation.

126
00:04:25,656 --> 00:04:27,207
While some operating systems,

127
00:04:27,207 --> 00:04:28,741
like Windows and Linux,

128
00:04:28,741 --> 00:04:30,776
offer ARM-compatible versions,

129
00:04:30,776 --> 00:04:33,622
many applications still require adaptation.

130
00:04:33,622 --> 00:04:35,328
This difference in compatibility

131
00:04:35,328 --> 00:04:37,776
also extends to peripherals and drivers,

132
00:04:37,776 --> 00:04:40,552
as x86-based systems often have

133
00:04:40,552 --> 00:04:42,724
broader support for external hardware,

134
00:04:42,724 --> 00:04:44,361
whereas ARM devices may require

135
00:04:44,361 --> 00:04:46,033
specialized drivers.

136
00:04:46,033 --> 00:04:48,602
While ARM's ecosystem is expanding,

137
00:04:48,602 --> 00:04:51,775
x86 remains the more universally compatible

138
00:04:51,775 --> 00:04:54,568
architecture, especially for users relying

139
00:04:54,568 --> 00:04:58,017
on a diverse range of software and hardware.

140
00:04:58,017 --> 00:05:00,881
Now, let's compare x86 and ARM

141
00:05:00,881 --> 00:05:02,225
with a simple example.

142
00:05:02,225 --> 00:05:03,932
Here is a short snippet that adds

143
00:05:03,932 --> 00:05:06,121
numbers from 1 to 5 and stores

144
00:05:06,121 --> 00:05:08,121
the result in a register:

145
00:05:13,711 --> 00:05:16,093
While both snippets achieve the same goal,

146
00:05:16,093 --> 00:05:18,196
there are key differences in how each

147
00:05:18,196 --> 00:05:20,576
architecture structures the instructions.

148
00:05:20,576 --> 00:05:23,128
x86 has a dedicated INC instruction

149
00:05:23,128 --> 00:05:25,836
for increment, whereas ARM does not,

150
00:05:25,836 --> 00:05:28,474
requiring an ADD operation instead.

151
00:05:28,474 --> 00:05:32,517
Similarly, x86 uses JL or Jump if Less

152
00:05:32,517 --> 00:05:34,448
for conditional branching, while ARM

153
00:05:34,448 --> 00:05:37,466
uses BLT or Branch if Less Than,

154
00:05:37,466 --> 00:05:40,260
which relies on status flags set by CMP.

155
00:05:40,260 --> 00:05:43,157
These differences illustrate how x86

156
00:05:43,157 --> 00:05:45,277
often provides specialized instructions

157
00:05:45,277 --> 00:05:47,104
for common tasks, while ARM

158
00:05:47,104 --> 00:05:50,501
relies on simpler, more general-purpose operations.

159
00:05:50,501 --> 00:05:52,277
Despite these variations,

160
00:05:52,277 --> 00:05:53,879
both architectures follow the same

161
00:05:53,879 --> 00:05:57,000
logical flow to complete the task.

162
00:05:57,000 --> 00:05:59,914
It should be noted that both x86 and ARM

163
00:05:59,914 --> 00:06:02,207
architectures power a wide range

164
00:06:02,207 --> 00:06:03,741
of real-world applications,

165
00:06:03,741 --> 00:06:05,931
each excelling in different areas.

166
00:06:05,931 --> 00:06:08,570
x86 processors are commonly used

167
00:06:08,570 --> 00:06:10,415
in performance-intensive applications

168
00:06:10,415 --> 00:06:12,743
such as high-end gaming, video editing

169
00:06:12,743 --> 00:06:14,639
and large-scale data processing.

170
00:06:14,639 --> 00:06:17,813
For example, game engines and 3D rendering software

171
00:06:17,813 --> 00:06:21,461
are often optimized for x86 due to its ability

172
00:06:21,461 --> 00:06:24,117
to handle complex calculations efficiently.

173
00:06:24,117 --> 00:06:26,462
On the other hand, ARM is widely favored

174
00:06:26,462 --> 00:06:29,152
for low-power, always-on applications,

175
00:06:29,152 --> 00:06:31,445
making it the backbone of embedded systems,

176
00:06:31,445 --> 00:06:33,290
IoT devices and even some

177
00:06:33,290 --> 00:06:35,290
cloud computing solutions.

178
00:06:35,290 --> 00:06:38,049
For instance, smart home automation systems,

179
00:06:38,049 --> 00:06:39,411
wearable health monitors

180
00:06:39,411 --> 00:06:41,238
and battery-powered security cameras

181
00:06:41,238 --> 00:06:43,428
frequently rely on ARM processors

182
00:06:43,428 --> 00:06:45,000
for their energy efficiency.

183
00:06:45,000 --> 00:06:47,465
Additionally, ARM's increasing adoption

184
00:06:47,465 --> 00:06:49,137
in server environments and even

185
00:06:49,137 --> 00:06:50,414
personal computing shows

186
00:06:50,414 --> 00:06:52,741
how its capabilities are expanding beyond

187
00:06:52,741 --> 00:06:55,604
traditional mobile and embedded uses.

188
00:06:55,604 --> 00:06:58,950
In conclusion, x86 and ARM Assembly

189
00:06:58,950 --> 00:07:00,501
each have their own strengths,

190
00:07:00,501 --> 00:07:02,534
shaped by their design philosophies

191
00:07:02,534 --> 00:07:04,327
and intended use cases.

192
00:07:04,327 --> 00:07:07,483
x86 excels in high-performance computing,

193
00:07:07,483 --> 00:07:09,328
offering a rich instruction set

194
00:07:09,328 --> 00:07:12,191
and broad compatibility, while ARM prioritizes

195
00:07:12,191 --> 00:07:14,554
power efficiency and scalability,

196
00:07:14,554 --> 00:07:16,192
making it ideal for mobile

197
00:07:16,192 --> 00:07:17,657
and embedded systems.

198
00:07:17,657 --> 00:07:19,882
Understanding these differences is crucial

199
00:07:19,882 --> 00:07:21,157
for developers working with

200
00:07:21,157 --> 00:07:24,192
low-level programming, performance optimization

201
00:07:24,192 --> 00:07:25,726
or system architecture.

202
00:07:25,726 --> 00:07:28,279
As ARM continues to expand into areas

203
00:07:28,279 --> 00:07:30,831
traditionally dominated by x86

204
00:07:30,831 --> 00:07:34,349
and x86 adapts to power efficiency demands,

205
00:07:34,349 --> 00:07:37,021
the line between them is becoming less rigid.

206
00:07:37,021 --> 00:07:38,814
Whether you're developing software,

207
00:07:38,814 --> 00:07:41,073
optimizing code or simply curious

208
00:07:41,073 --> 00:07:43,212
about processor architectures, knowing

209
00:07:43,212 --> 00:07:44,816
these distinctions helps in making

210
00:07:44,816 --> 00:07:48,335
informed choices in an evolving tech landscape.

211
00:07:48,335 --> 00:07:49,782
That wraps up our comparison

212
00:07:49,782 --> 00:07:52,455
of x86 and ARM Assembly.

213
00:07:52,455 --> 00:07:54,248
If you found this video helpful,

214
00:07:54,248 --> 00:07:56,845
consider subscribing and giving it a like.

215
00:07:56,845 --> 00:07:59,104
Check out our other videos on programming,

216
00:07:59,104 --> 00:08:01,639
computer architecture and tech concepts.

217
00:08:01,639 --> 00:08:03,639
Follow us on Facebook and Instagram

218
00:08:03,639 --> 00:08:04,933
for more updates.

219
00:08:04,933 --> 00:08:06,933
Thanks for watching!